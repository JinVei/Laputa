syntax = "proto3";

package laputa.raft.v1alpha1;

option go_package = "Laputa/api/raft/v1alpha1";

service Raft {
    // Invoked by candidates to gather votes
    rpc RequestVote(VoteRequest)  returns (VoteReply) {}
    // Invoked by leader to replicate log entries (§5.3); also used as heartbeat
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesReply) {}
    // Invoked by leader to send chunks of a snapshot to a follower. Leaders always send chunks in order
    rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotReply) {}
}

message VoteRequest {
    // candidate’s term
    uint64 term = 1;
    // candidate requesting vote
    int64 candidate_id = 2;
    // index of candidate’s last log entry 
    uint64 last_log_index = 3;
    // term of candidate’s last log entry
    uint64 last_log_term = 4;
}

message VoteReply {
    // currentTerm, for candidate to update itself
    uint64 term = 1;
    // true means candidate received vote
    bool vote_granted = 2;
}

message AppendEntriesRequest {
    // leader’s term
    uint64 term = 1;
    // so follower can redirect clients
    int64 leader_id = 2;
    // index of log entry immediately preceding new ones
    uint64 prev_log_index = 3;
    // term of prevLogIndex entry
    uint64 prev_log_term = 4;
    // log entries to store (empty for heartbeat; may send more than one for efficiency)
    repeated Entry entries = 5;
    // leader’s commitIndex
    uint64 leader_commit = 6;
}

message AppendEntriesReply {
    // currentTerm, for leader to update itself
    uint64 term = 1;
    // true if follower contained entry matching prevLogIndex and prevLogTerm
    bool success = 2;
}

message InstallSnapshotRequest {
    // leader’s term
    uint64 term = 1;
    // so follower can redirect clients
    int64 leader_id = 2;
    // the snapshot replaces all entries up through and including this index
    uint64 last_included_index = 3;
    // term of lastIncludedIndex
    uint64 last_included_term = 4;
    // byte offset where chunk is positioned in the snapshot file
    uint64 offset = 5;
    // raw bytes of the snapshot chunk, starting at offset
    bytes data = 6;
    // true if this is the last chunk
    bool done = 7;
}

message InstallSnapshotReply {
    // currentTerm, for leader to update itself
    uint64 term = 1;
}

message RaftState{
    // currentTerm, for leader to update itself
    uint64 term = 1;
}

message Entry {
    // Entry's term
    uint64 term = 1;
    // Entry's index
    uint64 index = 2;
    // Entry's data
    bytes data = 3;
}